name: Release
run-name: Release ${{ github.ref_name }}
on:
  push:
    branches:
      - 'main'
    #tags:
    #  - "v[0-9]+.[0-9]+.[0-9]+"
    #  - "v[0-9]+.[0-9]+.[0-9]+[a-zA-Z0-9]+"
jobs:

  lint:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Log
        run: |
          echo ${{ github.ref }}
          echo ${{ github.ref_name }}
      #- name: fmt
      #  run: cargo +nightly fmt --all -- --check
      #- name: clippy
      #  run: cargo clippy --all --verbose

  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [lint]
    outputs:
      TAG: ${{ steps.versions.outputs.TAG }}
      PKG_VER: ${{ steps.versions.outputs.PKG_VER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Versions
        id: versions
        run: |
          export CURRENT_TAG=$(git describe --tags --abbrev=0)
          export PKG_VER=v$(cat Cargo.toml | grep -A 5 package] | grep version | cut -d '=' -f 2 | tr -d '"' | tr -d " ")
          echo "Current tag $CURRENT_TAG"
          echo "Package version $PKG_VER"
          #
          echo "PKG_VER=$PKG_VER" >> $GITHUB_OUTPUT
          if [ $CURRENT_TAG == $PKG_VER  ];
            then
              echo "Tag is up to date. Nothing to do.";
              export TAG=old;
            else
              echo "Tag was updated.";
              git tag -a $PKG_VER -m "new tag";
              git log --tags --simplify-by-decoration --pretty="format:%ci %d";
              git push origin --tags;
              export TAG=new;
            fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Create/update tag
        id: tag
        if: ${{ steps.versions.outputs.TAG == 'new' }}
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ steps.versions.outputs.PKG_VER }}',
                sha: context.sha
              })
            } catch (err) {
              if (err.status !== 422) throw err;
              console.log("Tag already exists, updating")
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/${{ steps.versions.outputs.PKG_VER }}',
                sha: context.sha
              });
            }

  publish:
    runs-on: ubuntu-latest
    needs: [tag]
    if: ${{ needs.tag.outputs.TAG == 'new' }}
    steps:
      - name: Some job
        run: |
          echo "tag result:   ${{ needs.tag.outputs.TAG }}"
          echo "pkg version:  ${{ needs.tag.outputs.PKG_VER }}"
